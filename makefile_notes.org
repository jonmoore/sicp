Some notes on creating a makefile to help manage our code and tests.

The makefile supports running tests incrementally based on changes to
source file contents.

* Assumptions
- the high-level directory structure is known and can be used in the makefile
- the individual files are unknown; adding/removing a file within a known
  directory should not require updating the makefile
- make facilities like pattern-based rules should used in preference to
  ad hoc tools

* Design
- use a dependency chain
  - tests depend on .zo files compiled from .rkt files containing rackunit tests
  - .zo files depend on local and third-party racket modules.
- how to determine which files have tests?  Grep for rackunit.
  - This seems fine as we don't need any dependency information other than
    rackunit.  To be more robust way we could use the dependency information
    generated by running "raco make", together with the approach(es) that make
    now supports to avoid "make depends".  If we started using rackunit other
    than by a direct require that would change, but this seems unlikely given
    the small size of the project and the fact that some things in rackunit do
    not work as well if it is used indirectly.
- how to track dependencies of modules and recompile when needed? use "raco
  make", which will only perform incremental compilations (or at least
  incremental file updates).

* Rejected
Two more generic solutions to managing the multiple-directory structured have
been rejected:
- Paul Smith's approach to multi-architecture builds; heavier than this needs
- guile chdir; too magical/requires new-ish make

* raco make updating
    
  Conclusions:
  - updates timestamps of compiled .so files in the natural way, based on time
    stamps.
  - regenerates .dep files only when needed - if the source files change
    timestamp but not content then they are not regenerated.
