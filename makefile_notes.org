Some notes on creating a makefile to help manage our code and tests.

The makefile supports running tests incrementally based on changes to
source file contents.

*** Assumptions
  - the high-level directory structure is known and can be used in the makefile
  - the individual files are unknown; adding/removing a file within a known
    directory should not require updating the makefile
  - make facilities like pattern-based rules should used in preference to
    ad hoc tools

*** Design
  - use a dependency chain
    - tests depend on .zo files compiled from .rkt files containing rackunit tests
    - .zo files depend on local and third-party racket modules.
  - how to determine which files have tests?  Grep for rackunit.
    - This seems fine as we don't need any dependency information other than
      rackunit.  To be more robust way we could use the dependency information
      generated by running "raco make", together with the approach(es) that make
      now supports to avoid "make depends".  If we started using rackunit other
      than by a direct require that would change, but this seems unlikely given
      the small size of the project and the fact that some things in rackunit do
      not work as well if it is used indirectly.
  - how to track dependencies of modules and recompile when needed? use "raco
    make", which will only perform incremental compilations (or at least
    incremental file updates).

*** Todo
    
  - [ ] See if we can improve the rather hacky string manipulation for managing
    the multiple-directory structure by
    - making better use of make's string functions, or
    - running make multiple times from a wrapper script
  - [ ] Make the final test target depend on separate tests per zo file.
    Current behavior is correct but runs more tests than needed because each
    updated module is retested until all the tests pass.

*** Rejected
  Two more generic solutions to managing the multiple-directory structured have
  been rejected:
  - Paul Smith's approach to multi-architecture builds; heavier than this needs
  - guile chdir; too magical/requires new-ish make


* raco make updating
    
  Conclusions:
  - updates timestamps of compiled .so files in the natural way, based on time
    stamps.
  - regenerates .dep files only when needed - if the source files change
    timestamp but not content then they are not regenerated.
    
*** Testing notes 

    Try this with test-approaches\rackunit5\math.rkt, which depends on the local double.rkt

    raco make math.rkt

    #+BEGIN_SRC bat
    > dir compiled
     Volume in drive C is Local Disk
     Volume Serial Number is C034-A84E

     Directory of c:\Users\jonat\src\sicp\test-approaches\rackunit5\compiled

    04/21/2018  11:03 AM    <DIR>          .
    04/21/2018  11:03 AM    <DIR>          ..
    04/21/2018  11:03 AM               282 double_rkt.dep
    04/21/2018  11:21 AM             4,773 double_rkt.zo
    04/21/2018  11:03 AM               339 math_rkt.dep
    04/21/2018  11:21 AM             4,241 math_rkt.zo
    #+END_SRC

    Contents of math_rkt.dep (after reformatting whitespace)
    #+BEGIN_SRC
    ("6.11"
     ("54e665c128b9c5d9a280bdeb92b9694750eb3ea3" . "2aaf9d6e17169e42bf25711392e593e997336e6a")
     (collects #"racket" #"main.rkt")
     (collects #"racket" #"runtime-config.rkt")
     (collects #"rackunit" #"main.rkt")
     (collects #"sicp" #"lang" #"reader.rkt")
     (collects #"sicp" #"main.rkt")
     (collects #"test-approaches" #"rackunit5" #"double.rkt"))
    #+END_SRC

    Run raco make again - verified that .zo files are not updated.

    After removing deps files, ran raco make again.  Both zo and dep files were
    updated.

    Now touch double.rkt (contents stay the same)

    checked md5

    #+BEGIN_SRC dired
      c:/Users/jonat/src/sicp/test-approaches/rackunit5/compiled:
      total used in directory 18 available 171345880
      drwxrwxrwx 4096 04-21 11:33 ..
      drwxrwxrwx 4096 04-21 11:30 .
      -rw-rw-rw-  282 04-21 11:30 double_rkt.dep
      -rw-rw-rw- 4773 04-21 11:34 double_rkt.zo
      -rw-rw-rw-  339 04-21 11:30 math_rkt.dep
      -rw-rw-rw- 4241 04-21 11:34 math_rkt.zo
    #+END_SRC

    So deps stay the same, zo files updates

    Now touch math.rkt

    math_rkt.zo is updated, double.rkt is not

